/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useFrame, useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.Mesh;
  };
  materials: {};
};

const pi = Math.PI;
const AMPLITUDE = 0.0005;
const SPEED = 2;

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes } = useGLTF("/model.gltf") as GLTFResult;
  const { clock } = useThree();

  useFrame(() => {
    if (group.current) {
      group.current.position.y +=
        Math.sin(clock.getElapsedTime() * SPEED) * AMPLITUDE;
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.mesh_0.geometry}
        material={nodes.mesh_0.material}
        scale={0.009}
        castShadow
      >
        <meshStandardMaterial color={"#e0adff"} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/model.gltf");
